package com.campray.lesswalletmerchant.db.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.campray.lesswalletmerchant.db.converter.SpecAttrConverter;
import com.campray.lesswalletmerchant.db.converter.UserAttrConverter;
import com.campray.lesswalletmerchant.db.entity.Merchant;
import java.util.List;

import com.campray.lesswalletmerchant.db.entity.Product;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRODUCT".
*/
public class ProductDao extends AbstractDao<Product, Long> {

    public static final String TABLENAME = "PRODUCT";

    /**
     * Properties of entity Product.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ProductId = new Property(0, Long.class, "productId", true, "_id");
        public final static Property ProductTypeId = new Property(1, int.class, "productTypeId", false, "PRODUCT_TYPE_ID");
        public final static Property ProductTemplateId = new Property(2, int.class, "productTemplateId", false, "PRODUCT_TEMPLATE_ID");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property ShortDesc = new Property(4, String.class, "shortDesc", false, "SHORT_DESC");
        public final static Property FullDesc = new Property(5, String.class, "fullDesc", false, "FULL_DESC");
        public final static Property Agreement = new Property(6, String.class, "agreement", false, "AGREEMENT");
        public final static Property NumPrefix = new Property(7, String.class, "numPrefix", false, "NUM_PREFIX");
        public final static Property Price = new Property(8, float.class, "price", false, "PRICE");
        public final static Property CurrencyCode = new Property(9, String.class, "currencyCode", false, "CURRENCY_CODE");
        public final static Property StartTime = new Property(10, String.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(11, String.class, "endTime", false, "END_TIME");
        public final static Property Published = new Property(12, boolean.class, "published", false, "PUBLISHED");
        public final static Property Deleted = new Property(13, boolean.class, "deleted", false, "DELETED");
        public final static Property StockQuantity = new Property(14, int.class, "stockQuantity", false, "STOCK_QUANTITY");
        public final static Property SpecAttr = new Property(15, String.class, "specAttr", false, "SPEC_ATTR");
        public final static Property UserAttr = new Property(16, String.class, "userAttr", false, "USER_ATTR");
        public final static Property MerchantId = new Property(17, Long.class, "merchantId", false, "MERCHANT_ID");
    }

    private DaoSession daoSession;

    private final SpecAttrConverter specAttrConverter = new SpecAttrConverter();
    private final UserAttrConverter userAttrConverter = new UserAttrConverter();

    public ProductDao(DaoConfig config) {
        super(config);
    }
    
    public ProductDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRODUCT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: productId
                "\"PRODUCT_TYPE_ID\" INTEGER NOT NULL ," + // 1: productTypeId
                "\"PRODUCT_TEMPLATE_ID\" INTEGER NOT NULL ," + // 2: productTemplateId
                "\"TITLE\" TEXT NOT NULL ," + // 3: title
                "\"SHORT_DESC\" TEXT," + // 4: shortDesc
                "\"FULL_DESC\" TEXT," + // 5: fullDesc
                "\"AGREEMENT\" TEXT," + // 6: agreement
                "\"NUM_PREFIX\" TEXT," + // 7: numPrefix
                "\"PRICE\" REAL NOT NULL ," + // 8: price
                "\"CURRENCY_CODE\" TEXT," + // 9: currencyCode
                "\"START_TIME\" TEXT," + // 10: startTime
                "\"END_TIME\" TEXT," + // 11: endTime
                "\"PUBLISHED\" INTEGER NOT NULL ," + // 12: published
                "\"DELETED\" INTEGER NOT NULL ," + // 13: deleted
                "\"STOCK_QUANTITY\" INTEGER NOT NULL ," + // 14: stockQuantity
                "\"SPEC_ATTR\" TEXT," + // 15: specAttr
                "\"USER_ATTR\" TEXT," + // 16: userAttr
                "\"MERCHANT_ID\" INTEGER);"); // 17: merchantId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRODUCT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Product entity) {
        stmt.clearBindings();
 
        Long productId = entity.getProductId();
        if (productId != null) {
            stmt.bindLong(1, productId);
        }
        stmt.bindLong(2, entity.getProductTypeId());
        stmt.bindLong(3, entity.getProductTemplateId());
        stmt.bindString(4, entity.getTitle());
 
        String shortDesc = entity.getShortDesc();
        if (shortDesc != null) {
            stmt.bindString(5, shortDesc);
        }
 
        String fullDesc = entity.getFullDesc();
        if (fullDesc != null) {
            stmt.bindString(6, fullDesc);
        }
 
        String agreement = entity.getAgreement();
        if (agreement != null) {
            stmt.bindString(7, agreement);
        }
 
        String numPrefix = entity.getNumPrefix();
        if (numPrefix != null) {
            stmt.bindString(8, numPrefix);
        }
        stmt.bindDouble(9, entity.getPrice());
 
        String currencyCode = entity.getCurrencyCode();
        if (currencyCode != null) {
            stmt.bindString(10, currencyCode);
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(11, startTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(12, endTime);
        }
        stmt.bindLong(13, entity.getPublished() ? 1L: 0L);
        stmt.bindLong(14, entity.getDeleted() ? 1L: 0L);
        stmt.bindLong(15, entity.getStockQuantity());
 
        List specAttr = entity.getSpecAttr();
        if (specAttr != null) {
            stmt.bindString(16, specAttrConverter.convertToDatabaseValue(specAttr));
        }
 
        List userAttr = entity.getUserAttr();
        if (userAttr != null) {
            stmt.bindString(17, userAttrConverter.convertToDatabaseValue(userAttr));
        }
 
        Long merchantId = entity.getMerchantId();
        if (merchantId != null) {
            stmt.bindLong(18, merchantId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Product entity) {
        stmt.clearBindings();
 
        Long productId = entity.getProductId();
        if (productId != null) {
            stmt.bindLong(1, productId);
        }
        stmt.bindLong(2, entity.getProductTypeId());
        stmt.bindLong(3, entity.getProductTemplateId());
        stmt.bindString(4, entity.getTitle());
 
        String shortDesc = entity.getShortDesc();
        if (shortDesc != null) {
            stmt.bindString(5, shortDesc);
        }
 
        String fullDesc = entity.getFullDesc();
        if (fullDesc != null) {
            stmt.bindString(6, fullDesc);
        }
 
        String agreement = entity.getAgreement();
        if (agreement != null) {
            stmt.bindString(7, agreement);
        }
 
        String numPrefix = entity.getNumPrefix();
        if (numPrefix != null) {
            stmt.bindString(8, numPrefix);
        }
        stmt.bindDouble(9, entity.getPrice());
 
        String currencyCode = entity.getCurrencyCode();
        if (currencyCode != null) {
            stmt.bindString(10, currencyCode);
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(11, startTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(12, endTime);
        }
        stmt.bindLong(13, entity.getPublished() ? 1L: 0L);
        stmt.bindLong(14, entity.getDeleted() ? 1L: 0L);
        stmt.bindLong(15, entity.getStockQuantity());
 
        List specAttr = entity.getSpecAttr();
        if (specAttr != null) {
            stmt.bindString(16, specAttrConverter.convertToDatabaseValue(specAttr));
        }
 
        List userAttr = entity.getUserAttr();
        if (userAttr != null) {
            stmt.bindString(17, userAttrConverter.convertToDatabaseValue(userAttr));
        }
 
        Long merchantId = entity.getMerchantId();
        if (merchantId != null) {
            stmt.bindLong(18, merchantId);
        }
    }

    @Override
    protected final void attachEntity(Product entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Product readEntity(Cursor cursor, int offset) {
        Product entity = new Product( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // productId
            cursor.getInt(offset + 1), // productTypeId
            cursor.getInt(offset + 2), // productTemplateId
            cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // shortDesc
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // fullDesc
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // agreement
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // numPrefix
            cursor.getFloat(offset + 8), // price
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // currencyCode
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // startTime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // endTime
            cursor.getShort(offset + 12) != 0, // published
            cursor.getShort(offset + 13) != 0, // deleted
            cursor.getInt(offset + 14), // stockQuantity
            cursor.isNull(offset + 15) ? null : specAttrConverter.convertToEntityProperty(cursor.getString(offset + 15)), // specAttr
            cursor.isNull(offset + 16) ? null : userAttrConverter.convertToEntityProperty(cursor.getString(offset + 16)), // userAttr
            cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17) // merchantId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Product entity, int offset) {
        entity.setProductId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProductTypeId(cursor.getInt(offset + 1));
        entity.setProductTemplateId(cursor.getInt(offset + 2));
        entity.setTitle(cursor.getString(offset + 3));
        entity.setShortDesc(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFullDesc(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAgreement(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNumPrefix(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPrice(cursor.getFloat(offset + 8));
        entity.setCurrencyCode(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setStartTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setEndTime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPublished(cursor.getShort(offset + 12) != 0);
        entity.setDeleted(cursor.getShort(offset + 13) != 0);
        entity.setStockQuantity(cursor.getInt(offset + 14));
        entity.setSpecAttr(cursor.isNull(offset + 15) ? null : specAttrConverter.convertToEntityProperty(cursor.getString(offset + 15)));
        entity.setUserAttr(cursor.isNull(offset + 16) ? null : userAttrConverter.convertToEntityProperty(cursor.getString(offset + 16)));
        entity.setMerchantId(cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Product entity, long rowId) {
        entity.setProductId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Product entity) {
        if(entity != null) {
            return entity.getProductId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Product entity) {
        return entity.getProductId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getMerchantDao().getAllColumns());
            builder.append(" FROM PRODUCT T");
            builder.append(" LEFT JOIN MERCHANT T0 ON T.\"MERCHANT_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Product loadCurrentDeep(Cursor cursor, boolean lock) {
        Product entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Merchant merchant = loadCurrentOther(daoSession.getMerchantDao(), cursor, offset);
        entity.setMerchant(merchant);

        return entity;    
    }

    public Product loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Product> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Product> list = new ArrayList<Product>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Product> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Product> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
