package com.campray.lesswalletmerchant.db.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.campray.lesswalletmerchant.db.entity.Country;
import com.campray.lesswalletmerchant.db.entity.Currency;
import com.campray.lesswalletmerchant.db.entity.Language;

import com.campray.lesswalletmerchant.db.entity.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property Email = new Property(2, String.class, "email", false, "EMAIL");
        public final static Property Password = new Property(3, String.class, "password", false, "PASSWORD");
        public final static Property Mobile = new Property(4, String.class, "mobile", false, "MOBILE");
        public final static Property FirstName = new Property(5, String.class, "firstName", false, "FIRST_NAME");
        public final static Property LastName = new Property(6, String.class, "lastName", false, "LAST_NAME");
        public final static Property Birthday = new Property(7, String.class, "birthday", false, "BIRTHDAY");
        public final static Property CountryId = new Property(8, long.class, "countryId", false, "COUNTRY_ID");
        public final static Property Address = new Property(9, String.class, "address", false, "ADDRESS");
        public final static Property Token = new Property(10, String.class, "token", false, "TOKEN");
        public final static Property LanguageId = new Property(11, Long.class, "languageId", false, "LANGUAGE_ID");
        public final static Property CurrencyId = new Property(12, Long.class, "currencyId", false, "CURRENCY_ID");
        public final static Property Remember = new Property(13, boolean.class, "remember", false, "REMEMBER");
        public final static Property AvatarUrl = new Property(14, String.class, "avatarUrl", false, "AVATAR_URL");
        public final static Property AvatorPath = new Property(15, String.class, "avatorPath", false, "AVATOR_PATH");
        public final static Property Points = new Property(16, int.class, "points", false, "POINTS");
        public final static Property VenderId = new Property(17, long.class, "venderId", false, "VENDER_ID");
    }

    private DaoSession daoSession;


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_NAME\" TEXT UNIQUE ," + // 1: userName
                "\"EMAIL\" TEXT NOT NULL ," + // 2: email
                "\"PASSWORD\" TEXT NOT NULL ," + // 3: password
                "\"MOBILE\" TEXT," + // 4: mobile
                "\"FIRST_NAME\" TEXT," + // 5: firstName
                "\"LAST_NAME\" TEXT," + // 6: lastName
                "\"BIRTHDAY\" TEXT," + // 7: birthday
                "\"COUNTRY_ID\" INTEGER NOT NULL ," + // 8: countryId
                "\"ADDRESS\" TEXT," + // 9: address
                "\"TOKEN\" TEXT," + // 10: token
                "\"LANGUAGE_ID\" INTEGER," + // 11: languageId
                "\"CURRENCY_ID\" INTEGER," + // 12: currencyId
                "\"REMEMBER\" INTEGER NOT NULL ," + // 13: remember
                "\"AVATAR_URL\" TEXT," + // 14: avatarUrl
                "\"AVATOR_PATH\" TEXT," + // 15: avatorPath
                "\"POINTS\" INTEGER NOT NULL ," + // 16: points
                "\"VENDER_ID\" INTEGER NOT NULL );"); // 17: venderId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
        stmt.bindString(3, entity.getEmail());
        stmt.bindString(4, entity.getPassword());
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(5, mobile);
        }
 
        String firstName = entity.getFirstName();
        if (firstName != null) {
            stmt.bindString(6, firstName);
        }
 
        String lastName = entity.getLastName();
        if (lastName != null) {
            stmt.bindString(7, lastName);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(8, birthday);
        }
        stmt.bindLong(9, entity.getCountryId());
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(10, address);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(11, token);
        }
 
        Long languageId = entity.getLanguageId();
        if (languageId != null) {
            stmt.bindLong(12, languageId);
        }
 
        Long currencyId = entity.getCurrencyId();
        if (currencyId != null) {
            stmt.bindLong(13, currencyId);
        }
        stmt.bindLong(14, entity.getRemember() ? 1L: 0L);
 
        String avatarUrl = entity.getAvatarUrl();
        if (avatarUrl != null) {
            stmt.bindString(15, avatarUrl);
        }
 
        String avatorPath = entity.getAvatorPath();
        if (avatorPath != null) {
            stmt.bindString(16, avatorPath);
        }
        stmt.bindLong(17, entity.getPoints());
        stmt.bindLong(18, entity.getVenderId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
        stmt.bindString(3, entity.getEmail());
        stmt.bindString(4, entity.getPassword());
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(5, mobile);
        }
 
        String firstName = entity.getFirstName();
        if (firstName != null) {
            stmt.bindString(6, firstName);
        }
 
        String lastName = entity.getLastName();
        if (lastName != null) {
            stmt.bindString(7, lastName);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(8, birthday);
        }
        stmt.bindLong(9, entity.getCountryId());
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(10, address);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(11, token);
        }
 
        Long languageId = entity.getLanguageId();
        if (languageId != null) {
            stmt.bindLong(12, languageId);
        }
 
        Long currencyId = entity.getCurrencyId();
        if (currencyId != null) {
            stmt.bindLong(13, currencyId);
        }
        stmt.bindLong(14, entity.getRemember() ? 1L: 0L);
 
        String avatarUrl = entity.getAvatarUrl();
        if (avatarUrl != null) {
            stmt.bindString(15, avatarUrl);
        }
 
        String avatorPath = entity.getAvatorPath();
        if (avatorPath != null) {
            stmt.bindString(16, avatorPath);
        }
        stmt.bindLong(17, entity.getPoints());
        stmt.bindLong(18, entity.getVenderId());
    }

    @Override
    protected final void attachEntity(User entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.getString(offset + 2), // email
            cursor.getString(offset + 3), // password
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mobile
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // firstName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // lastName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // birthday
            cursor.getLong(offset + 8), // countryId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // address
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // token
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11), // languageId
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12), // currencyId
            cursor.getShort(offset + 13) != 0, // remember
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // avatarUrl
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // avatorPath
            cursor.getInt(offset + 16), // points
            cursor.getLong(offset + 17) // venderId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEmail(cursor.getString(offset + 2));
        entity.setPassword(cursor.getString(offset + 3));
        entity.setMobile(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFirstName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLastName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBirthday(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCountryId(cursor.getLong(offset + 8));
        entity.setAddress(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setToken(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLanguageId(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
        entity.setCurrencyId(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
        entity.setRemember(cursor.getShort(offset + 13) != 0);
        entity.setAvatarUrl(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setAvatorPath(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setPoints(cursor.getInt(offset + 16));
        entity.setVenderId(cursor.getLong(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCountryDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getLanguageDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getCurrencyDao().getAllColumns());
            builder.append(" FROM USER T");
            builder.append(" LEFT JOIN COUNTRY T0 ON T.\"COUNTRY_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN LANGUAGE T1 ON T.\"LANGUAGE_ID\"=T1.\"_id\"");
            builder.append(" LEFT JOIN CURRENCY T2 ON T.\"CURRENCY_ID\"=T2.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected User loadCurrentDeep(Cursor cursor, boolean lock) {
        User entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Country country = loadCurrentOther(daoSession.getCountryDao(), cursor, offset);
         if(country != null) {
            entity.setCountry(country);
        }
        offset += daoSession.getCountryDao().getAllColumns().length;

        Language language = loadCurrentOther(daoSession.getLanguageDao(), cursor, offset);
        entity.setLanguage(language);
        offset += daoSession.getLanguageDao().getAllColumns().length;

        Currency currenty = loadCurrentOther(daoSession.getCurrencyDao(), cursor, offset);
        entity.setCurrenty(currenty);

        return entity;    
    }

    public User loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<User> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<User> list = new ArrayList<User>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<User> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<User> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
