package com.campray.lesswalletmerchant.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.campray.lesswalletmerchant.db.entity.Currency;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CURRENCY".
*/
public class CurrencyDao extends AbstractDao<Currency, Long> {

    public static final String TABLENAME = "CURRENCY";

    /**
     * Properties of entity Currency.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property CurrencyCode = new Property(2, String.class, "currencyCode", false, "CURRENCY_CODE");
        public final static Property Rate = new Property(3, String.class, "rate", false, "RATE");
        public final static Property CustomFormatting = new Property(4, String.class, "customFormatting", false, "CUSTOM_FORMATTING");
        public final static Property DisplayOrder = new Property(5, int.class, "displayOrder", false, "DISPLAY_ORDER");
        public final static Property IsDefault = new Property(6, boolean.class, "isDefault", false, "IS_DEFAULT");
    }


    public CurrencyDao(DaoConfig config) {
        super(config);
    }
    
    public CurrencyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CURRENCY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"CURRENCY_CODE\" TEXT NOT NULL ," + // 2: currencyCode
                "\"RATE\" TEXT NOT NULL ," + // 3: rate
                "\"CUSTOM_FORMATTING\" TEXT NOT NULL ," + // 4: customFormatting
                "\"DISPLAY_ORDER\" INTEGER NOT NULL ," + // 5: displayOrder
                "\"IS_DEFAULT\" INTEGER NOT NULL );"); // 6: isDefault
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CURRENCY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Currency entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getCurrencyCode());
        stmt.bindString(4, entity.getRate());
        stmt.bindString(5, entity.getCustomFormatting());
        stmt.bindLong(6, entity.getDisplayOrder());
        stmt.bindLong(7, entity.getIsDefault() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Currency entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getCurrencyCode());
        stmt.bindString(4, entity.getRate());
        stmt.bindString(5, entity.getCustomFormatting());
        stmt.bindLong(6, entity.getDisplayOrder());
        stmt.bindLong(7, entity.getIsDefault() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Currency readEntity(Cursor cursor, int offset) {
        Currency entity = new Currency( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.getString(offset + 2), // currencyCode
            cursor.getString(offset + 3), // rate
            cursor.getString(offset + 4), // customFormatting
            cursor.getInt(offset + 5), // displayOrder
            cursor.getShort(offset + 6) != 0 // isDefault
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Currency entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setCurrencyCode(cursor.getString(offset + 2));
        entity.setRate(cursor.getString(offset + 3));
        entity.setCustomFormatting(cursor.getString(offset + 4));
        entity.setDisplayOrder(cursor.getInt(offset + 5));
        entity.setIsDefault(cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Currency entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Currency entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Currency entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
