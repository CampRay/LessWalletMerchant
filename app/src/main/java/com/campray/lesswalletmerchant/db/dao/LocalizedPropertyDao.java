package com.campray.lesswalletmerchant.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.campray.lesswalletmerchant.db.entity.LocalizedProperty;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCALIZED_PROPERTY".
*/
public class LocalizedPropertyDao extends AbstractDao<LocalizedProperty, Long> {

    public static final String TABLENAME = "LOCALIZED_PROPERTY";

    /**
     * Properties of entity LocalizedProperty.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property EntityId = new Property(1, Long.class, "entityId", false, "ENTITY_ID");
        public final static Property LanguageId = new Property(2, Long.class, "languageId", false, "LANGUAGE_ID");
        public final static Property LocaleKeyGroup = new Property(3, String.class, "localeKeyGroup", false, "LOCALE_KEY_GROUP");
        public final static Property LocaleKey = new Property(4, String.class, "localeKey", false, "LOCALE_KEY");
        public final static Property LocaleValue = new Property(5, String.class, "localeValue", false, "LOCALE_VALUE");
    }


    public LocalizedPropertyDao(DaoConfig config) {
        super(config);
    }
    
    public LocalizedPropertyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCALIZED_PROPERTY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ENTITY_ID\" INTEGER NOT NULL ," + // 1: entityId
                "\"LANGUAGE_ID\" INTEGER NOT NULL ," + // 2: languageId
                "\"LOCALE_KEY_GROUP\" TEXT NOT NULL ," + // 3: localeKeyGroup
                "\"LOCALE_KEY\" TEXT NOT NULL ," + // 4: localeKey
                "\"LOCALE_VALUE\" TEXT NOT NULL );"); // 5: localeValue
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCALIZED_PROPERTY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LocalizedProperty entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getEntityId());
        stmt.bindLong(3, entity.getLanguageId());
        stmt.bindString(4, entity.getLocaleKeyGroup());
        stmt.bindString(5, entity.getLocaleKey());
        stmt.bindString(6, entity.getLocaleValue());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LocalizedProperty entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getEntityId());
        stmt.bindLong(3, entity.getLanguageId());
        stmt.bindString(4, entity.getLocaleKeyGroup());
        stmt.bindString(5, entity.getLocaleKey());
        stmt.bindString(6, entity.getLocaleValue());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LocalizedProperty readEntity(Cursor cursor, int offset) {
        LocalizedProperty entity = new LocalizedProperty( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // entityId
            cursor.getLong(offset + 2), // languageId
            cursor.getString(offset + 3), // localeKeyGroup
            cursor.getString(offset + 4), // localeKey
            cursor.getString(offset + 5) // localeValue
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LocalizedProperty entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEntityId(cursor.getLong(offset + 1));
        entity.setLanguageId(cursor.getLong(offset + 2));
        entity.setLocaleKeyGroup(cursor.getString(offset + 3));
        entity.setLocaleKey(cursor.getString(offset + 4));
        entity.setLocaleValue(cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LocalizedProperty entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LocalizedProperty entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LocalizedProperty entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
